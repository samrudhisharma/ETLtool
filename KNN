/*
KNN - k nearest neighbours
*/
packagetryknn;

importjava.io.BufferedReader;
importjava.io.File;
importjava.io.FileInputStream;
importjava.io.InputStreamReader;
importjava.util.StringTokenizer;
importjava.util.*;

public class TryKNN {
    
    
    public static void main(String[] args) {
        try
        {
            ints,n=28;
            int max=0,min=9999999,max1=0,min1=9999999,count0=0,count1=0,count2=0,cmax,ind;
            inttset[][]= new int[28][2];
            int classify[][]=new int[1][2];
            float tset1[][];
            double dis;
            doubleans[];
            double diff[][];
            double temp;
            //extracting data from a txt file
            Scanner sc = new Scanner(System.in);
            File f = new File(".");
            String dest = f.getCanonicalPath()+File.separator+"destC.txt";
            File fin1 = new File(dest);
            FileInputStream fis1 = new FileInputStream(fin1);
            BufferedReader in1 = new BufferedReader(new InputStreamReader(fis1));
            String aLine = null;
            intno_attr = 0;
            intno_row = 0;
            String fileArray[][];
            
            String input = "";
            input = in1.readLine();
            StringTokenizer line = new StringTokenizer(input);
            no_attr = line.countTokens()-1;
            fileArray = new String[28][no_attr+1];
            
            for(int i=0;i&lt;=no_attr;i++)
            {
                fileArray[0][i] = line.nextToken();
            }
            
            while(true)
            {
                input = in1.readLine();
                if(input == null) break;
                line = new StringTokenizer(input);
                no_row++;
                for(int i=0;i&lt;=no_attr;i++)
                fileArray[no_row][i] = line.nextToken();
                
            }
            
            for(int i=0;i&lt;28;i++)
            {
                for(int j=0;j&lt;5;j++)
                {System.out.print(fileArray[i][j]+" ");
                }
                
                System.out.println();
                
                
            }
            
            System.out.println("We are assigning numeric values for the classes");
            System.out.println("cheap = 1");
            System.out.println("affordable = 2");
            System.out.println("expensive = 3");
            intfinalT[][] = new int[28][3];
            
            for(int i=0;i&lt;28;i++)
            {
                
                finalT[i][0] = Integer.parseInt(fileArray[i][2]);
                finalT[i][1] = Integer.parseInt(fileArray[i][3]);
            }
            for(int i=0;i&lt;28;i++)
            {
                
                if(fileArray[i][4].compareTo("cheap")==0)
                {
                    finalT[i][2] = 1;
                }
                if(fileArray[i][4].compareTo("affordable")==0)
                {
                    finalT[i][2] = 2;
                }
                if(fileArray[i][4].compareTo("expensive")==0)
                {
                    finalT[i][2] = 3;
                }
            }
            
            for(int i=0;i&lt;28;i++)
            {
                System.out.println(finalT[i][0]+"  "+finalT[i][1]+"  "+finalT[i][2]);
            }
            
            
            
            for(int i=0;i&lt;n;i++)
            {
                if(finalT[i][0]&gt;max)
                max=finalT[i][0];
                if(finalT[i][1]&gt;max1)
                max1=finalT[i][1];
                
            }
            for(int i=0;i&lt;n;i++)
            {
                if(finalT[i][0]&lt;min)
                min=finalT[i][0];
                if(finalT[i][1]&lt;min1)
                min1=finalT[i][1];
            }
            
            
            
            System.out.println("Enter tuple to classify");
            classify[0][0]=sc.nextInt();
            classify[0][1]=sc.nextInt();
            
            double xy1;
            double xy2;
            double xy3=0;
            double ans1[] = new double[28];
            for(int i=0;i&lt;n;i++)
            {
                xy1 = (finalT[i][0] - classify[0][0])*(finalT[i][0] - classify[0][0]);
                xy2 = (finalT[i][1] - classify[0][1])*(finalT[i][1] - classify[0][1]);
                xy3 = xy1+xy2;
                ans1[i] = Math.sqrt(xy3);
                
            }
            
            doublefinalAns [][] = new double[28][2];
            for(int i=0;i&lt;n;i++)
            {
                finalAns[i][0] =  ans1[i];
                finalAns[i][1] = finalT[i][2];
                // System.out.print(finalAns[i][0]+" "+finalAns[i][1]+"\n");
            }
            
            doubletempVar;
            double tempVar1;
            
            for (int i = 0; i &lt; 28; i++)
            {
                for(int j = 0; j &lt; 28; j++)
                {
                    if(finalAns[i][0] &lt;finalAns[j][0])
                    {
                        tempVar = finalAns [j][0];
                        finalAns [j][0]= finalAns[i][0];
                        finalAns[i][0] = tempVar;
                        
                        tempVar1 = finalAns [j][1];
                        finalAns [j][1]= finalAns[i][1];
                        finalAns[i][1] = tempVar1;
                        
                        
                    }
                }
            }
            
            
            /*for(int i=0;i&lt;n;i++)
            {
                
                System.out.print(finalAns[i][0]+" "+finalAns[i][1]+"\n");
            }*/
            
            int c1=0,c2=0,c3=0;
            for(int i=0;i&lt;7;i++)
            {
                if(finalAns[i][1]==1)
                c1++;
                if(finalAns[i][1]==2)
                c2++;
                if(finalAns[i][1]==3)
                c3++;
            }
            int cmax1 = c1;
            if(c2&gt;cmax1)
            {
                System.out.println("Tuple is affordable");
            }
            else if(c3&gt;cmax1)
            {
                System.out.println("Tuple is expensive");
            }
            else
            {
                System.out.println("Tuple is cheap");
            }
            
        }
        catch(Exception e)
        {
            
        }
        
    }
    
}

Output:
Alprazolam Cold 200 5 affordable
Lisinopril Allergy 700 10 expensive
Singulair Cancer 2000 25 expensive
Glyburide Acidity 400 5 affordable
Lorazepam Acidity 2100 15 expensive
Lovaza Cold 100 15 cheap
Ventolin Acidity 300 10 affordable
Sertraline Cancer 3000 10 expensive
Losartan Acidity 70 5 cheap
Lexapro Cold 210 10 affordable
Zolpidem Allergy 600 15 expensive
Pravastatin Cold 60 5 cheap
Vyvanse Allergy 700 10 expensive
Oxycodone Cancer 4000 6 expensive
Endocet Allergy 220 10 affordable
Trazodone Acidity 50 15 cheap
Citalopram Acidity 60 4 cheap
Lisinopril Cold 240 5 affordable
Cephalexin Cancer 6000 15 expensive
Diazepam Cold 200 20 affordable
Glipizide Cancer 2500 5 expensive
Hydrocodone Acidity 260 5 affordable
Atenolol Acidity 230 5 affordable
Lorazepam Cold 970 12 expensive
Seroquel Cancer 4200 20 expensive
Atenolal Acidity 200 5 affordable
Lorazepom Cold 50 10 cheap
Seroquyl Cancer 4500 25 expensive
We are assigning numeric values for the classes
cheap = 1
affordable = 2
expensive = 3
200  5  2
700  10  3
2000  25  3
400  5  2
2100  15  3
100  15  1
300  10  2
3000  10  3
70  5  1
210  10  2
600  15  3
60  5  1
700  10  3
4000  6  3
220  10  2
50  15  1
60  4  1
240  5  2
6000  15  3
200  20  2
2500  5  3
260  5  2
230  5  2
970  12  3
4200  20  3
200  5  2
50  10  1
4500  25  3
Enter tuple to classify
300 45
Tuple is affordable
